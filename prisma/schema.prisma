// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
// Auth Schema:
model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  password      String
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
 
  


  member Member?

  @@map("users")
}

// After Authentication 
// User can be a member


model Member {
  id          String   @id @default(cuid())
  userId      String
  firstName   String
  lastName    String
  gender      String
  dateOfBirth DateTime
  description String?
  city        String
  country     String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])

  photos Photo[]
  sourceLikes Like[] @relation("sourceUser")
  targetLikes Like[] @relation("targetUser")
}

model Photo{
  id String @id @default(cuid())
  url String
  publicId String?

  memberId String

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

// Many to Many relationship between members and Like

model Like{
  sourceUserId   String
  targetUserId   String

  sourceUser Member @relation("sourceUser",fields: [sourceUserId], references: [userId], onDelete: Cascade)

  targetUser Member @relation("targetUser",fields: [targetUserId], references: [userId], onDelete: Cascade)

  @@id([sourceUserId, targetUserId])

}
